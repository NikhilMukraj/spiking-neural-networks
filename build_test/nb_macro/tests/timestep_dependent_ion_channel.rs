
#[cfg(test)]
mod test {
    use nb_macro::neuron_builder; 


    #[derive(Debug, Clone, Copy)]
    pub struct ReferenceCalciumIonChannel {
        /// Maximal conductance of the channel (nS)
        pub g_ca: f32,
        /// Reversal potential (mV)
        pub e_ca: f32,
        /// Gating variable
        pub s: BasicGatingVariable,
        /// Current generated by channel
        pub current: f32,
    }

    impl Default for ReferenceCalciumIonChannel {
        fn default() -> Self {
            ReferenceCalciumIonChannel {
                g_ca: 0.025,
                e_ca: 80.,
                s: BasicGatingVariable::default(),
                current: 0.,
            }
        }
    }

    impl ReferenceCalciumIonChannel {
        fn update_gate_states(&mut self, voltage: f32) {
            self.s.alpha = 1.6 / (1. + (-0.072 * (voltage - 5.)).exp());
            self.s.beta = (0.02 * (voltage + 8.9)) / (((voltage + 8.9).exp() / 5.) - 1.);
        }
    }

    impl IonChannel for ReferenceCalciumIonChannel {
        fn update_current(&mut self, voltage: f32, dt: f32) {
            self.update_gate_states(voltage);

            self.s.update(dt);

            self.current = -self.s.state.powf(2.) * self.g_ca * (voltage - self.e_ca);
        }

        fn get_current(&self) -> f32 {
            self.current
        }
    }
    
    neuron_builder!(r#"
        [ion_channel]
            type: CalciumIonChannel 
            vars: e = 80, g = 0.025,
            gating_vars: s
            on_iteration:
                s.alpha = 1.6 / (1 + exp(-0.072 * (v - 5)))
                s.beta = (0.02 * (v + 8.9)) / ((exp(v + 8.9) / 5) - 1)

                s.update(dt)

                current = g * -(s.state ^ 2) * (v - e)
        [end]
    "#);


    #[test]
    pub fn test_current() {
        let mut ref_channel = ReferenceCalciumIonChannel::default();
        let mut channel_to_test = CalciumIonChannel::default();

        let voltages = [-50., -40., -30., -20., -10., 0., 10., 20., 30.];

        for i in voltages {
            for _ in 0..1000 {
                ref_channel.update_current(i, 0.01);
                channel_to_test.update_current(i, 0.01);

                assert_eq!(ref_channel.current, channel_to_test.current);
            }
        }
    }
}