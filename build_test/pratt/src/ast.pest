integer = @{ ASCII_DIGIT+ }
decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
number = @{ decimal | integer }
name_characters = @{ 'a'..'z' | 'A'..'z' | "_" }

name = @{ name_characters ~ (name_characters | integer)* }

// this should be added to expr parser (and bool expr parser)
struct_call = { name ~ "." ~ name ~ ("(" ~ args ~ ")")? } 

args = {
    (expr | struct_call | function | name | number)? ~ (" "* ~ "," ~ " "* ~ (expr | function | name | number))* ~ ","?
}
function = { name ~ ("(" ~ args ~ ")") }

unary_minus = { "-" }
primary = _{ struct_call | function | number | name | "(" ~ expr ~ ")" }

// atom = _{ not_operator? ~ unary_minus? ~ primary }
atom = _{ (not_operator ~ primary) | (unary_minus ~ primary) | primary  }

// bin_op = _{ add | subtract | multiply | divide | power }
// 	add = { "+" }
// 	subtract = { "-" }
// 	multiply = { "*" }
// 	divide = { "/" }
// 	power = { "^" }

not_operator = { "!" }

bin_op = _{ 
	greater_than_or_equal | less_than_or_equal | equal | not_equal | 
	greater_than | less_than | and_operator | or_operator |
	add | subtract | multiply | divide | power 
}
	equal = { "==" }
	not_equal = { "!=" }
	greater_than = { ">" }
	greater_than_or_equal = { ">=" }
	less_than = { "<" }
	less_than_or_equal = { "<=" }
	and_operator = { "&&" }
	or_operator = { "||" }
	add = { "+" }
	subtract = { "-" }
	multiply = { "*" }
	divide = { "/" }
	power = { "^" }

expr = { atom ~ (bin_op ~ atom)* }
// bool_expr = { atom ~ (bool_bin_op ~ atom)* }

diff_eq_declaration = { "d" ~ name ~ "/dt" ~ " "* ~ "=" ~ " "* ~ expr }
eq_declaration = { name ~ " "* ~ "=" ~ " "* ~ expr }

func_declaration_args = { "(" ~ name ~ (" "* ~ "," ~ " "* ~ name)* ~ ","? ~ ")" }
func_declaration = { name ~ func_declaration_args ~ " "* ~ "=" ~ " "* ~ expr }

WHITESPACE = _{ " " }

// neuron block
// functions block (has any functions that )
// ion channel block
// neurotransmitter kinetics block
// receptor kinetics block

// neuron should include type of neuron (name of neuron)
// test code generation, and reading from file
// neuron should include list of necessary variables
// variables either all have defaults or none have defaults
// on_spike block, (on_spike: v_reset = 0)
// spike_detection block, (spike_detection: continous), (spike_detection: v >= v_th)
// bool expr grammar, maybe seperate pratt parser for booleans or
// pratt parser has two functions, one is unedited and for evaluating numeric expressions
// the other is for booleans with numerics, bool operators have highest precedence
// if normal expr pratt parser gets a boolean operator, a specific error is thrown saying that boolean was not expected

// seperate pratt parsers, one for expr and one for bool expr
// bool_expr = { atom ~ (bin_bool_op ~ atom)* }

// neuron block should have option to either be extendable (ligand gates and neurotransmitter default implementation)
// or custom (custom ligand gates, ligand gates block)

// when checking for type and what ligand gates to use, 
// just keep matching on each pair in neuron block and assign them to an associated ast enum 
// (ligand gates declaration, type declaration, equations, on spike, etc), 
// then loop through each of the ast enums and add them to the appropriate field on the 
// neuron block ast enum, if a certain enum cannot be found the declaration is missing and an 
// error is thrown

// type: NeuronName
// on_spike: assignments
// spike_detection: bool_expr
// ligand_gates: default

signed_number = @{ unary_minus? ~ number }
variables_block = _{ "vars:" ~ " "* ~ name ~ (" "* ~ "," ~ " "* ~ name)* ~ ","? }
variables_assignment = { name ~ " "* ~ "=" ~ " "* ~ signed_number }
variables_with_assignment = _{ 
	"vars:" ~ " "* ~ variables_assignment ~ 
    (" "* ~ "," ~ " "* ~ variables_assignment)* ~ 
    ","? 
}

struct_assignment = { name ~ " "* ~ "=" ~ " "* ~ name }
ion_channels_def_with_assignment = _{ 
	"ion_channels:" ~ " "* ~ struct_assignment ~ 
    (" "* ~ "," ~ " "* ~ struct_assignment)* ~ 
    ","? 
}

// eq_assignments = { (eq_declaration ~ " "* ~ "=" ~ " "* ~ expr) ~ (NEWLINE* ~ (eq_declaration ~ " "* ~ "=" ~ " "* ~ expr))* ~ NEWLINE? }
eq_assignments = _{ eq_declaration ~ (NEWLINE* ~ eq_declaration)* ~ NEWLINE? }
assignment = _{ func_declaration | diff_eq_declaration | eq_declaration }
assignments = _{ assignment ~ (NEWLINE* ~ assignment)* ~ NEWLINE? }

type_def = { "type:" ~ " "* ~ name ~ NEWLINE+ }
vars_def  = { variables_block ~ NEWLINE+ }
vars_with_default_def  = { variables_with_assignment ~ NEWLINE+ }
on_spike_def = { "on_spike:" ~ " "* ~ (NEWLINE+ | " "+ | "") ~ eq_assignments }
on_iteration_def = { "on_iteration:" ~ " "* ~ (NEWLINE+ | " "+ | "") ~ assignments }
spike_detection_def = { "spike_detection:" ~ " "* ~ expr ~ NEWLINE+ }
ion_channels_def = { ion_channels_def_with_assignment ~ NEWLINE+ }
ligand_gates_def = { "ligand_gates:" ~ " "* ~ name ~ NEWLINE+ }

neuron_definition = {
    "[neuron]" ~ NEWLINE ~ 
	(
		on_iteration_def | type_def | on_spike_def | spike_detection_def | 
		vars_def | vars_with_default_def | ion_channels_def
	){5,} ~ 
	"[end]"
}

gating_variables_block = _{ "gating_vars:" ~ " "* ~ name ~ (" "* ~ "," ~ " "* ~ name)* ~ ","? }
gating_variables_def = { gating_variables_block ~ NEWLINE+ }

ion_channel_definition = {
	"[ion_channel]" ~ NEWLINE ~ 
	(gating_variables_def | type_def | vars_def | vars_with_default_def | on_iteration_def){3,} ~
	"[end]"
}

full = _{
	SOI ~ NEWLINE* ~ ((neuron_definition | ion_channel_definition)+ ~ NEWLINE*)* ~ EOI
}

// [ligand_gates]
// type: name
// neurotransmitter_type: g * r * (voltage - e)
// â€¦
// for custom ligand gates, a ligand gate struct is generated for each associated neurotransmitter type, 
// which are then put in a ligand gated channels struct

// allow functions to have if statements
// if () -> () else -> ()
// if () -> () elif () -> () else -> ()
// allow nextlines with if statements
