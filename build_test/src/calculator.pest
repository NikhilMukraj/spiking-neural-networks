// No whitespace allowed between digits
integer = @{ ASCII_DIGIT+ }
decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
number = @{ decimal | integer }

name = @{ ('a'..'z' | 'A'..'z' | "_")+ }
// func takes in expr too?

unary_minus = { "-" }
primary = _{ number | "(" ~ expr ~ ")" | name }
atom = _{ unary_minus? ~ primary }

bin_op = _{ add | subtract | multiply | divide | power }
	add = { "+" }
	subtract = { "-" }
	multiply = { "*" }
	divide = { "/" }
	power = { "^" }

expr = { atom ~ (bin_op ~ atom)* }

// We can't have SOI and EOI on expr directly, because it is used recursively (e.g. with parentheses)
equation = _{ SOI ~ expr ~ EOI }

WHITESPACE = _{ " " }

// // No whitespace allowed between digits
// integer = @{ ASCII_DIGIT+ }
// decimal = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
// number = @{ decimal | integer }
// name_characters = @{ 'a'..'z' | 'A'..'z' | "_" }

// name = @{ name_characters ~ (name_characters | integer)* }

// args = { ((expr | function | name | number)) ~ (" "* ~ "," ~ " "* ~ (expr | function | name | number))* ~ ","? }
// function = { name ~ ("(" ~ args ~ ")") }

// unary_minus = { "-" }
// primary = _{ function | number | name | "(" ~ expr ~ ")" }

// atom = _{ unary_minus? ~ primary }

// bin_op = _{ add | subtract | multiply | divide | power }
// 	add = { "+" }
// 	subtract = { "-" }
// 	multiply = { "*" }
// 	divide = { "/" }
// 	power = { "^" }

// expr = { atom ~ (bin_op ~ atom)* }

// // We can't have SOI and EOI on expr directly, because it is used recursively (e.g. with parentheses)
// equation = _{ SOI ~ expr ~ EOI }

// WHITESPACE = _{ " " }

